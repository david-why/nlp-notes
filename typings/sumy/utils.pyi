import typing as t

T = t.TypeVar('T')
SequenceT = t.TypeVar('SequenceT', bound=t.Sequence)

def normalize_language(language: str) -> str: ...
def fetch_url(url: str | bytes) -> bytes: ...
def cached_property(getter: t.Callable[[t.Any], t.Any]) -> property: ...
def expand_resource_path(path: str | bytes) -> str: ...
def get_stop_words(language: str) -> frozenset[str]: ...
def read_stop_words(filename: str) -> frozenset[str]: ...
def parse_stop_words(data: bytes) -> frozenset[str]: ...
class ItemsCount(object):
    def __init__(self, value: t.Any): ...
    def __call__(self, sequence: SequenceT) -> SequenceT: ...
    def __repr__(self) -> str: ...

del t
